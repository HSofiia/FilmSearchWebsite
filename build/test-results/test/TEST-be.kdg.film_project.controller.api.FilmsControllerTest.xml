<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="be.kdg.film_project.controller.api.FilmsControllerTest" tests="7" skipped="0" failures="0" errors="0" timestamp="2024-05-26T11:50:20" hostname="Sofias-MacBook-Air.local" time="0.211">
  <properties/>
  <testcase name="changeFilmWithUserRoleReturnsForbidden()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.016"/>
  <testcase name="changeFilmIsNotAllowedIfNotSignedIn()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.013"/>
  <testcase name="getActorsOfFilmsShouldReturnNoContentIfNoAssignedActors()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.024"/>
  <testcase name="changeFilmWithAdminRoleShouldReturnNoContent()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.074"/>
  <testcase name="getActorsOfFilmsShouldReturnNotFoundForNonExistentIssue()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.013"/>
  <testcase name="changeFilmShouldReturnNotFoundIfFilmDoesNotExist()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.013"/>
  <testcase name="getActorsOfFilmsShouldReturnOkWithActors()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.051"/>
  <system-out><![CDATA[2024-05-26T13:50:20.643+02:00  INFO 45819 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [be.kdg.film_project.controller.api.FilmsControllerTest]: FilmsControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-05-26T13:50:20.651+02:00  INFO 45819 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration be.kdg.StartApplication for test class be.kdg.film_project.controller.api.FilmsControllerTest
Hibernate: select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: select fc1_0.id,fc1_0.actor_id,fc1_0.film_id from film_casting fc1_0 where fc1_0.id=?
Hibernate: delete from film_casting where id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: delete from film where id=?
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: select fc1_0.id,fc1_0.actor_id,fc1_0.film_id from film_casting fc1_0 where fc1_0.id=?
Hibernate: delete from film_casting where id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: delete from film where id=?
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?
Hibernate: select fc1_0.id,fc1_0.actor_id,fc1_0.film_id from film_casting fc1_0 where fc1_0.id=?
Hibernate: delete from film_casting where id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: delete from film where id=?
Hibernate: select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: update film set box_office=?,film_name=?,genre=?,release_year=? where id=?
Hibernate: select fc1_0.id,fc1_0.actor_id,fc1_0.film_id from film_casting fc1_0 where fc1_0.id=?
Hibernate: delete from film_casting where id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: delete from film where id=?
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?
Hibernate: select fc1_0.id,fc1_0.actor_id,fc1_0.film_id from film_casting fc1_0 where fc1_0.id=?
Hibernate: delete from film_casting where id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: delete from film where id=?
Hibernate: select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select fc1_0.id,fc1_0.actor_id,fc1_0.film_id from film_casting fc1_0 where fc1_0.id=?
Hibernate: delete from film_casting where id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: delete from film where id=?
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/extraFilmInfo/1/actors
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = be.kdg.film_project.controller.api.FilmsController
           Method = be.kdg.film_project.controller.api.FilmsController#getActorsOfFilms(int)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"actorName":"Killian Merphy","gender":"M","nationality":"Irish","id":1},{"actorName":"Rami Malek","gender":"M","nationality":"American","id":4}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select fc1_0.id,fc1_0.actor_id,fc1_0.film_id from film_casting fc1_0 where fc1_0.id=?
Hibernate: delete from film_casting where id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: delete from film where id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
