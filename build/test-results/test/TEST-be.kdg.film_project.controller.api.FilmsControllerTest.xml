<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="be.kdg.film_project.controller.api.FilmsControllerTest" tests="7" skipped="0" failures="0" errors="0" timestamp="2024-05-17T12:15:26" hostname="Sofias-MacBook-Air.local" time="4.573">
  <properties/>
  <testcase name="changeFilmWithUserRoleReturnsForbidden()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="2.891"/>
  <testcase name="changeFilmIsNotAllowedIfNotSignedIn()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.28"/>
  <testcase name="getActorsOfFilmsShouldReturnNoContentIfNoAssignedActors()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.31"/>
  <testcase name="changeFilmWithAdminRoleShouldReturnNoContent()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.463"/>
  <testcase name="getActorsOfFilmsShouldReturnNotFoundForNonExistentIssue()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.05"/>
  <testcase name="changeFilmShouldReturnNotFoundIfFilmDoesNotExist()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.077"/>
  <testcase name="getActorsOfFilmsShouldReturnOkWithActors()" classname="be.kdg.film_project.controller.api.FilmsControllerTest" time="0.469"/>
  <system-out><![CDATA[14:15:07.962 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [be.kdg.film_project.controller.api.FilmsControllerTest]: FilmsControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
14:15:08.445 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration be.kdg.StartApplication for test class be.kdg.film_project.controller.api.FilmsControllerTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.1.3)

2024-05-17T14:15:10.165+02:00  INFO 30531 --- [    Test worker] b.k.f.c.api.FilmsControllerTest          : Starting FilmsControllerTest using Java 21.0.2 with PID 30531 (started by sofiahmyria in /Users/sofiahmyria/IdeaProjects/programming-5)
2024-05-17T14:15:10.167+02:00  INFO 30531 --- [    Test worker] b.k.f.c.api.FilmsControllerTest          : The following 1 profile is active: "test"
2024-05-17T14:15:12.066+02:00  INFO 30531 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-05-17T14:15:12.312+02:00  INFO 30531 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 199 ms. Found 5 JPA repository interfaces.
2024-05-17T14:15:13.655+02:00  INFO 30531 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-05-17T14:15:13.885+02:00  INFO 30531 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.2.7.Final
2024-05-17T14:15:13.891+02:00  INFO 30531 --- [    Test worker] org.hibernate.cfg.Environment            : HHH000406: Using bytecode reflection optimizer
2024-05-17T14:15:14.484+02:00  INFO 30531 --- [    Test worker] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2024-05-17T14:15:15.067+02:00  INFO 30531 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-05-17T14:15:15.165+02:00  INFO 30531 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-05-17T14:15:16.447+02:00  INFO 30531 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@524c854c
2024-05-17T14:15:16.451+02:00  INFO 30531 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-05-17T14:15:17.781+02:00  INFO 30531 --- [    Test worker] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2024-05-17T14:15:20.134+02:00  INFO 30531 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2024-05-17T14:15:20.176+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : alter table if exists director drop constraint if exists FKeox6rmuu3j7esmllq1cg022xa
Hibernate: alter table if exists director drop constraint if exists FKeox6rmuu3j7esmllq1cg022xa
2024-05-17T14:15:20.207+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : alter table if exists film_casting drop constraint if exists FKdpbx2oo0uhp58l0dxbqdm6c3q
Hibernate: alter table if exists film_casting drop constraint if exists FKdpbx2oo0uhp58l0dxbqdm6c3q
2024-05-17T14:15:20.211+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : alter table if exists film_casting drop constraint if exists FKb2avfvx70nfcjk3e8p89v94vj
Hibernate: alter table if exists film_casting drop constraint if exists FKb2avfvx70nfcjk3e8p89v94vj
2024-05-17T14:15:20.215+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : drop table if exists actor cascade
Hibernate: drop table if exists actor cascade
2024-05-17T14:15:20.248+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : drop table if exists director cascade
Hibernate: drop table if exists director cascade
2024-05-17T14:15:20.264+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : drop table if exists film cascade
Hibernate: drop table if exists film cascade
2024-05-17T14:15:20.279+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : drop table if exists film_casting cascade
Hibernate: drop table if exists film_casting cascade
2024-05-17T14:15:20.306+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : drop table if exists user_table cascade
Hibernate: drop table if exists user_table cascade
2024-05-17T14:15:20.364+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : create table actor (id serial not null, actor_name varchar(255), gender varchar(255) check (gender in ('M','F','N')), nationality varchar(255), primary key (id))
Hibernate: create table actor (id serial not null, actor_name varchar(255), gender varchar(255) check (gender in ('M','F','N')), nationality varchar(255), primary key (id))
2024-05-17T14:15:20.434+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : create table director (birth integer, film_id integer, id serial not null, award varchar(255), director_name varchar(255), primary key (id))
Hibernate: create table director (birth integer, film_id integer, id serial not null, award varchar(255), director_name varchar(255), primary key (id))
2024-05-17T14:15:20.453+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : create table film (box_office float(53), id serial not null, release_year date, film_name varchar(255), genre varchar(255) check (genre in ('HISTORY','SPY','FANTASY','ROMANCE','ACTION')), primary key (id))
Hibernate: create table film (box_office float(53), id serial not null, release_year date, film_name varchar(255), genre varchar(255) check (genre in ('HISTORY','SPY','FANTASY','ROMANCE','ACTION')), primary key (id))
2024-05-17T14:15:20.465+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : create table film_casting (actor_id integer not null, film_id integer not null, id serial not null, primary key (id), constraint UKgprrdn7mj3rol443mt5qn0fls unique (film_id, actor_id))
Hibernate: create table film_casting (actor_id integer not null, film_id integer not null, id serial not null, primary key (id), constraint UKgprrdn7mj3rol443mt5qn0fls unique (film_id, actor_id))
2024-05-17T14:15:20.478+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : create table user_table (id serial not null, role smallint not null check (role between 0 and 1), password varchar(255) not null, username varchar(255) not null, primary key (id))
Hibernate: create table user_table (id serial not null, role smallint not null check (role between 0 and 1), password varchar(255) not null, username varchar(255) not null, primary key (id))
2024-05-17T14:15:20.499+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : alter table if exists director add constraint FKeox6rmuu3j7esmllq1cg022xa foreign key (film_id) references film
Hibernate: alter table if exists director add constraint FKeox6rmuu3j7esmllq1cg022xa foreign key (film_id) references film
2024-05-17T14:15:20.567+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : alter table if exists film_casting add constraint FKdpbx2oo0uhp58l0dxbqdm6c3q foreign key (actor_id) references actor on delete cascade
Hibernate: alter table if exists film_casting add constraint FKdpbx2oo0uhp58l0dxbqdm6c3q foreign key (actor_id) references actor on delete cascade
2024-05-17T14:15:20.580+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : alter table if exists film_casting add constraint FKb2avfvx70nfcjk3e8p89v94vj foreign key (film_id) references film on delete cascade
Hibernate: alter table if exists film_casting add constraint FKb2avfvx70nfcjk3e8p89v94vj foreign key (film_id) references film on delete cascade
2024-05-17T14:15:20.589+02:00  INFO 30531 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-05-17T14:15:21.543+02:00  INFO 30531 --- [    Test worker] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2024-05-17T14:15:24.140+02:00  INFO 30531 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4184365c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1a2986b, org.springframework.security.web.context.SecurityContextHolderFilter@4385c3af, org.springframework.security.web.header.HeaderWriterFilter@2c19e682, org.springframework.security.web.csrf.CsrfFilter@6d5dc239, org.springframework.security.web.authentication.logout.LogoutFilter@62750368, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5ea6c7db, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@52a872c9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@48308b6f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@426f2b49, org.springframework.security.web.access.ExceptionTranslationFilter@378eef72, org.springframework.security.web.access.intercept.AuthorizationFilter@4effefca]
2024-05-17T14:15:26.451+02:00  INFO 30531 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2024-05-17T14:15:26.452+02:00  INFO 30531 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2024-05-17T14:15:26.455+02:00  INFO 30531 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 2 ms
2024-05-17T14:15:26.496+02:00  INFO 30531 --- [    Test worker] b.k.f.c.api.FilmsControllerTest          : Started FilmsControllerTest in 17.494 seconds (process running for 23.037)
2024-05-17T14:15:26.896+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
Hibernate: select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
2024-05-17T14:15:29.034+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:29.089+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:29.116+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
2024-05-17T14:15:29.181+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
2024-05-17T14:15:29.248+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
2024-05-17T14:15:29.279+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film_casting where id=?
Hibernate: delete from film_casting where id=?
2024-05-17T14:15:29.286+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:29.297+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film where id=?
Hibernate: delete from film where id=?
2024-05-17T14:15:29.456+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:29.473+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:29.515+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
2024-05-17T14:15:29.539+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
2024-05-17T14:15:29.704+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
2024-05-17T14:15:29.710+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film_casting where id=?
Hibernate: delete from film_casting where id=?
2024-05-17T14:15:29.714+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:29.720+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film where id=?
Hibernate: delete from film where id=?
2024-05-17T14:15:29.734+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:29.747+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:29.767+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
2024-05-17T14:15:29.775+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
2024-05-17T14:15:29.981+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?
2024-05-17T14:15:30.021+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
2024-05-17T14:15:30.025+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film_casting where id=?
Hibernate: delete from film_casting where id=?
2024-05-17T14:15:30.030+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:30.034+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film where id=?
Hibernate: delete from film where id=?
2024-05-17T14:15:30.050+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
Hibernate: select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
2024-05-17T14:15:30.058+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.066+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.072+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
2024-05-17T14:15:30.076+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
2024-05-17T14:15:30.425+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:30.458+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:30.470+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : update film set box_office=?,film_name=?,genre=?,release_year=? where id=?
Hibernate: update film set box_office=?,film_name=?,genre=?,release_year=? where id=?
2024-05-17T14:15:30.481+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
2024-05-17T14:15:30.485+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film_casting where id=?
Hibernate: delete from film_casting where id=?
2024-05-17T14:15:30.489+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:30.495+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film where id=?
Hibernate: delete from film where id=?
2024-05-17T14:15:30.513+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.518+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.523+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
2024-05-17T14:15:30.526+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
2024-05-17T14:15:30.535+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?
2024-05-17T14:15:30.541+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
2024-05-17T14:15:30.546+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film_casting where id=?
Hibernate: delete from film_casting where id=?
2024-05-17T14:15:30.549+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:30.552+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film where id=?
Hibernate: delete from film where id=?
2024-05-17T14:15:30.568+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
Hibernate: select u1_0.id,u1_0.password,u1_0.role,u1_0.username from user_table u1_0 where u1_0.username=?
2024-05-17T14:15:30.574+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.580+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.584+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
2024-05-17T14:15:30.588+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
2024-05-17T14:15:30.598+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:30.606+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
2024-05-17T14:15:30.616+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film_casting where id=?
Hibernate: delete from film_casting where id=?
2024-05-17T14:15:30.621+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:30.626+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film where id=?
Hibernate: delete from film where id=?
2024-05-17T14:15:30.649+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.732+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
Hibernate: insert into film (box_office,film_name,genre,release_year) values (?,?,?,?)
2024-05-17T14:15:30.744+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality from actor a1_0 where a1_0.id=?
2024-05-17T14:15:30.761+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : insert into film_casting (actor_id,film_id) values (?,?)
Hibernate: insert into film_casting (actor_id,film_id) values (?,?)
2024-05-17T14:15:30.814+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,c1_0.film_id,c1_0.id,c1_0.actor_id,a1_0.id,a1_0.actor_name,a1_0.gender,a1_0.nationality,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 left join film_casting c1_0 on f1_0.id=c1_0.film_id left join actor a1_0 on a1_0.id=c1_0.actor_id where f1_0.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/extraFilmInfo/1/actors
       Parameters = {}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = be.kdg.film_project.controller.api.FilmsController
           Method = be.kdg.film_project.controller.api.FilmsController#getActorsOfFilms(int)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"actorName":"Killian Merphy","gender":"M","nationality":"Irish","id":1},{"actorName":"Rami Malek","gender":"M","nationality":"American","id":4}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2024-05-17T14:15:31.087+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.actor_id,f1_0.film_id from film_casting f1_0 where f1_0.id=?
2024-05-17T14:15:31.091+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film_casting where id=?
Hibernate: delete from film_casting where id=?
2024-05-17T14:15:31.098+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
Hibernate: select f1_0.id,f1_0.box_office,f1_0.film_name,f1_0.genre,f1_0.release_year from film f1_0 where f1_0.id=?
2024-05-17T14:15:31.103+02:00 DEBUG 30531 --- [    Test worker] org.hibernate.SQL                        : delete from film where id=?
Hibernate: delete from film where id=?
]]></system-out>
  <system-err><![CDATA[WARNING: A Java agent has been loaded dynamically (/Users/sofiahmyria/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy-agent/1.14.6/46e2545d7a97b6ccb195621650c5957279eb4812/byte-buddy-agent-1.14.6.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
</testsuite>
